// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator js {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    Client
    Staff
    Livreur
    Fournisseur
    Admin
    Superadmin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(Client)
    notes         Note[]
    company       Company?  @relation(fields: [company_id], references: [id])
    company_id    String?   @unique
    phones        String?
    accounts      Account[]
    sessions      Session[]
    commands      Command[]
    supply        Supply[]
}

model Note {
    id       String @id @default(cuid())
    authorId String
    userId   String
    note     String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthorizedEmails {
    id    String @id @default(cuid())
    email String @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// STORE

model Company {
    id                 String      @id @default(cuid())
    role               CompanyType
    name               String
    address            String
    phones             String
    employees          User[]
    commands           Command[]
    supplies_delivery  Supply[]    @relation(name: "delivery")
    supplies_provision Supply[]    @relation(name: "provider")
}

enum CompanyType {
    Livraison
    Fournisseur
    Vendeur
}

model Command {
    id                   Int            @id @default(autoincrement())
    delivery_company     Company        @relation(fields: [delivery_company_id], references: [id], onDelete: Cascade)
    delivery_company_id  String         @unique
    items                CommandItem[]
    total_cost           Float
    delivery_fee         Float
    delivery_address     String
    delivery_address_gps String
    created_at           DateTime       @default(now())
    //no facture
    delivery_date        DateTime?
    status               DeliveryStatus @default(Approvisionement)
    created_by           User           @relation(fields: [client_id], references: [id], onDelete: Cascade)
    client_id            String         @unique
}

enum DeliveryStatus {
    Approvisionement
    Attente_Livraison
    En_Livraison
    Complete
    Annulee
}

model CommandItem {
    id           String      @id @default(cuid())
    product_unit ProductUnit @relation(fields: [sku], references: [sku], onDelete: Cascade)
    sku          String      @unique
    qte          Int
    unit_price   Float
    command      Command     @relation(fields: [command_id], references: [id], onDelete: Cascade)
    command_id   Int         @unique
}

model Supply {
    id                  Int             @id @default(autoincrement())
    payed               Boolean
    total_cost          Float?
    delivery_fees       Float?
    created_at          DateTime        @default(now())
    craeted_by          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id             String          @unique
    delivery_date       DateTime?
    delivery_company    Company         @relation(name: "delivery", fields: [delivery_company_id], references: [id], onDelete: Cascade)
    delivery_company_id String          @unique
    provider_company    Company         @relation(name: "provider", fields: [provider_company_id], references: [id], onDelete: Cascade)
    provider_company_id String          @unique
    status              ProvisionStatus @default(En_Attente)
    extra_ref           String?
    delivery_address    String
}

model SupplyItem {
    id      Int         @id @default(autoincrement())
    product ProductUnit @relation(fields: [sku], references: [sku], onDelete: Cascade)
    sku     String      @unique
}

enum ProvisionStatus {
    Complete
    En_Livraison
    En_Attente
    Annulee
}

model ProductIdentity {
    sku                 String            @id
    associated_products ProductUnit[]
    product_group       ProductGroup      @relation(fields: [product_group_id], references: [id], onDelete: Cascade)
    product_group_id    String            @unique
    variation           ProductVariation?
    upc                 String            @unique
}

model ProductVariation {
    id                  String          @id @default(cuid())
    product_identity    ProductIdentity @relation(fields: [product_identity_id], references: [sku])
    product_identity_id String          @unique
    name                String
    photos              String
    color_name          String?
    color_hex           String?
    size                String?
    weight              String?
}

model ProductGroup {
    id                 String            @id @default(cuid())
    product_identities ProductIdentity[]
    characteristics    String
}

model ProductUnit {
    id               Int             @id @default(autoincrement())
    product_identity ProductIdentity @relation(fields: [sku], references: [sku], onDelete: Cascade)
    sku              String          @unique
    supply_item      SupplyItem[]
    command_item     CommandItem[]
    purchase_date    DateTime?
    purchase_price   Float
    expiration_date  DateTime?
}

enum ProductStatus {
    Vendu
    En_Stock
    En_Livraison
    En_Attente
}

model invoice {
    id Int @id @default(autoincrement())
}
